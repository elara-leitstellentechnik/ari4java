package ch.loway.oss.ari4java.generated.ari_0_0_1.actions;

// ----------------------------------------------------
//      THIS CLASS WAS GENERATED AUTOMATICALLY         
//               PLEASE DO NOT EDIT                    
//    Generated on: Thu Aug 24 16:05:02 CEST 2017
// ----------------------------------------------------

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import ch.loway.oss.ari4java.generated.*;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import ch.loway.oss.ari4java.tools.BaseAriAction;
import ch.loway.oss.ari4java.tools.RestException;
import ch.loway.oss.ari4java.tools.AriCallback;
import ch.loway.oss.ari4java.tools.HttpParam;
import ch.loway.oss.ari4java.tools.HttpResponse;
import com.fasterxml.jackson.core.type.TypeReference;
import ch.loway.oss.ari4java.generated.ari_0_0_1.models.*;

/**********************************************************
 * 
 * Generated by: Apis
 *********************************************************/


public class ActionChannels_impl_ari_0_0_1 extends BaseAriAction  implements ActionChannels {
/**********************************************************
 * Active channels
 * 
 * List all active channels in Asterisk.
 *********************************************************/
private void buildList() {
reset();
url = "/channels";
method = "GET";
}

@Override
public List<Channel> list() throws RestException {
buildList();
String json = httpActionSync();
return deserializeJsonAsAbstractList( json,
   new TypeReference<List<Channel_impl_ari_0_0_1>>() {} ); 
}

@Override
public void list(@NotNull AriCallback<List<Channel>> callback) {
buildList();
httpActionAsync(callback, new TypeReference<List<Channel_impl_ari_0_0_1>>() {});
}

/**********************************************************
 * Active channels
 * 
 * Create a new channel (originate).
 * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
 *********************************************************/
private void buildOriginate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout) {
reset();
url = "/channels";
method = "POST";
lParamQuery.add( HttpParam.build( "endpoint", endpoint) );
lParamQuery.add( HttpParam.build( "extension", extension) );
lParamQuery.add( HttpParam.build( "context", context) );
lParamQuery.add( HttpParam.build( "priority", priority) );
lParamQuery.add( HttpParam.build( "app", app) );
lParamQuery.add( HttpParam.build( "appArgs", appArgs) );
lParamQuery.add( HttpParam.build( "callerId", callerId) );
lParamQuery.add( HttpParam.build( "timeout", timeout) );
lE.add( HttpResponse.build( 400, "Invalid parameters for originating a channel.") );
}

@Override
public Channel originate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout) throws RestException {
buildOriginate(endpoint, extension, context, priority, app, appArgs, callerId, timeout);
String json = httpActionSync();
return deserializeJson( json, Channel_impl_ari_0_0_1.class ); 
}

@Override
public void originate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @NotNull AriCallback<Channel> callback) {
buildOriginate(endpoint, extension, context, priority, app, appArgs, callerId, timeout);
httpActionAsync(callback, Channel_impl_ari_0_0_1.class);
}

/**********************************************************
 * Active channel
 * 
 * Channel details.
 *********************************************************/
private void buildGet(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "";
method = "GET";
lE.add( HttpResponse.build( 404, "Channel not found") );
}

@Override
public Channel get(@NotNull String channelId) throws RestException {
buildGet(channelId);
String json = httpActionSync();
return deserializeJson( json, Channel_impl_ari_0_0_1.class ); 
}

@Override
public void get(@NotNull String channelId, @NotNull AriCallback<Channel> callback) {
buildGet(channelId);
httpActionAsync(callback, Channel_impl_ari_0_0_1.class);
}

/**********************************************************
 * Active channel
 * 
 * Delete (i.e. hangup) a channel.
 *********************************************************/
private void buildHangup(@NotNull String channelId, @Nullable String reason) {
reset();
url = "/channels/" + channelId + "";
method = "DELETE";
lParamQuery.add( HttpParam.build( "reason", reason) );
lE.add( HttpResponse.build( 400, "Invalid reason for hangup provided") );
lE.add( HttpResponse.build( 404, "Channel not found") );
}

@Override
public void hangup(@NotNull String channelId, @Nullable String reason) throws RestException {
buildHangup(channelId, reason);
String json = httpActionSync();
}

@Override
public void hangup(@NotNull String channelId, @Nullable String reason, @NotNull AriCallback<Void> callback) {
buildHangup(channelId, reason);
httpActionAsync(callback);
}

/**********************************************************
 * Answer a channel
 * 
 * Answer a channel.
 *********************************************************/
private void buildAnswer(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "/answer";
method = "POST";
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void answer(@NotNull String channelId) throws RestException {
buildAnswer(channelId);
String json = httpActionSync();
}

@Override
public void answer(@NotNull String channelId, @NotNull AriCallback<Void> callback) {
buildAnswer(channelId);
httpActionAsync(callback);
}

/**********************************************************
 * Exit application; continue execution in the dialplan
 * 
 * Exit application; continue execution in the dialplan.
 *********************************************************/
private void buildContinueInDialplan(@NotNull String channelId, @Nullable String context, @Nullable String extension, @Nullable int priority) {
reset();
url = "/channels/" + channelId + "/continue";
method = "POST";
lParamQuery.add( HttpParam.build( "context", context) );
lParamQuery.add( HttpParam.build( "extension", extension) );
lParamQuery.add( HttpParam.build( "priority", priority) );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void continueInDialplan(@NotNull String channelId, @Nullable String context, @Nullable String extension, @Nullable int priority) throws RestException {
buildContinueInDialplan(channelId, context, extension, priority);
String json = httpActionSync();
}

@Override
public void continueInDialplan(@NotNull String channelId, @Nullable String context, @Nullable String extension, @Nullable int priority, @NotNull AriCallback<Void> callback) {
buildContinueInDialplan(channelId, context, extension, priority);
httpActionAsync(callback);
}

/**********************************************************
 * Send DTMF to a channel
 * 
 * Send provided DTMF to a given channel.
 *********************************************************/
private void buildSendDTMF(@NotNull String channelId, @Nullable String dtmf, @Nullable int before, @Nullable int between, @Nullable int duration, @Nullable int after) {
reset();
url = "/channels/" + channelId + "/dtmf";
method = "POST";
lParamQuery.add( HttpParam.build( "dtmf", dtmf) );
lParamQuery.add( HttpParam.build( "before", before) );
lParamQuery.add( HttpParam.build( "between", between) );
lParamQuery.add( HttpParam.build( "duration", duration) );
lParamQuery.add( HttpParam.build( "after", after) );
lE.add( HttpResponse.build( 400, "DTMF is required") );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void sendDTMF(@NotNull String channelId, @Nullable String dtmf, @Nullable int before, @Nullable int between, @Nullable int duration, @Nullable int after) throws RestException {
buildSendDTMF(channelId, dtmf, before, between, duration, after);
String json = httpActionSync();
}

@Override
public void sendDTMF(@NotNull String channelId, @Nullable String dtmf, @Nullable int before, @Nullable int between, @Nullable int duration, @Nullable int after, @NotNull AriCallback<Void> callback) {
buildSendDTMF(channelId, dtmf, before, between, duration, after);
httpActionAsync(callback);
}

/**********************************************************
 * Put a channel on hold
 * 
 * Hold a channel.
 *********************************************************/
private void buildHold(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "/hold";
method = "POST";
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void hold(@NotNull String channelId) throws RestException {
buildHold(channelId);
String json = httpActionSync();
}

@Override
public void hold(@NotNull String channelId, @NotNull AriCallback<Void> callback) {
buildHold(channelId);
httpActionAsync(callback);
}

/**********************************************************
 * Put a channel on hold
 * 
 * Remove a channel from hold.
 *********************************************************/
private void buildUnhold(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "/hold";
method = "DELETE";
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void unhold(@NotNull String channelId) throws RestException {
buildUnhold(channelId);
String json = httpActionSync();
}

@Override
public void unhold(@NotNull String channelId, @NotNull AriCallback<Void> callback) {
buildUnhold(channelId);
httpActionAsync(callback);
}

/**********************************************************
 * Play music on hold to a channel
 * 
 * Play music on hold to a channel.
 * Using media operations such as /play on a channel playing MOH in this manner will suspend MOH without resuming automatically. If continuing music on hold is desired, the stasis application must reinitiate music on hold.
 *********************************************************/
private void buildStartMoh(@NotNull String channelId, @Nullable String mohClass) {
reset();
url = "/channels/" + channelId + "/moh";
method = "POST";
lParamQuery.add( HttpParam.build( "mohClass", mohClass) );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void startMoh(@NotNull String channelId, @Nullable String mohClass) throws RestException {
buildStartMoh(channelId, mohClass);
String json = httpActionSync();
}

@Override
public void startMoh(@NotNull String channelId, @Nullable String mohClass, @NotNull AriCallback<Void> callback) {
buildStartMoh(channelId, mohClass);
httpActionAsync(callback);
}

/**********************************************************
 * Play music on hold to a channel
 * 
 * Stop playing music on hold to a channel.
 *********************************************************/
private void buildStopMoh(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "/moh";
method = "DELETE";
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void stopMoh(@NotNull String channelId) throws RestException {
buildStopMoh(channelId);
String json = httpActionSync();
}

@Override
public void stopMoh(@NotNull String channelId, @NotNull AriCallback<Void> callback) {
buildStopMoh(channelId);
httpActionAsync(callback);
}

/**********************************************************
 * Mute a channel
 * 
 * Mute a channel.
 *********************************************************/
private void buildMute(@NotNull String channelId, @Nullable String direction) {
reset();
url = "/channels/" + channelId + "/mute";
method = "POST";
lParamQuery.add( HttpParam.build( "direction", direction) );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void mute(@NotNull String channelId, @Nullable String direction) throws RestException {
buildMute(channelId, direction);
String json = httpActionSync();
}

@Override
public void mute(@NotNull String channelId, @Nullable String direction, @NotNull AriCallback<Void> callback) {
buildMute(channelId, direction);
httpActionAsync(callback);
}

/**********************************************************
 * Mute a channel
 * 
 * Unmute a channel.
 *********************************************************/
private void buildUnmute(@NotNull String channelId, @Nullable String direction) {
reset();
url = "/channels/" + channelId + "/mute";
method = "DELETE";
lParamQuery.add( HttpParam.build( "direction", direction) );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void unmute(@NotNull String channelId, @Nullable String direction) throws RestException {
buildUnmute(channelId, direction);
String json = httpActionSync();
}

@Override
public void unmute(@NotNull String channelId, @Nullable String direction, @NotNull AriCallback<Void> callback) {
buildUnmute(channelId, direction);
httpActionAsync(callback);
}

/**********************************************************
 * Play media to a channel
 * 
 * Start playback of media.
 * The media URI may be any of a number of URI's. Currently sound: and recording: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
 *********************************************************/
private void buildPlay(@NotNull String channelId, @NotNull String media, @Nullable String lang, @Nullable int offsetms, @Nullable int skipms) {
reset();
url = "/channels/" + channelId + "/play";
method = "POST";
lParamQuery.add( HttpParam.build( "media", media) );
lParamQuery.add( HttpParam.build( "lang", lang) );
lParamQuery.add( HttpParam.build( "offsetms", offsetms) );
lParamQuery.add( HttpParam.build( "skipms", skipms) );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public Playback play(@NotNull String channelId, @NotNull String media, @Nullable String lang, @Nullable int offsetms, @Nullable int skipms) throws RestException {
buildPlay(channelId, media, lang, offsetms, skipms);
String json = httpActionSync();
return deserializeJson( json, Playback_impl_ari_0_0_1.class ); 
}

@Override
public void play(@NotNull String channelId, @NotNull String media, @Nullable String lang, @Nullable int offsetms, @Nullable int skipms, @NotNull AriCallback<Playback> callback) {
buildPlay(channelId, media, lang, offsetms, skipms);
httpActionAsync(callback, Playback_impl_ari_0_0_1.class);
}

/**********************************************************
 * Record audio from a channel
 * 
 * Start a recording.
 * Record audio from a channel. Note that this will not capture audio sent to the channel. The bridge itself has a record feature if that's what you want.
 *********************************************************/
private void buildRecord(@NotNull String channelId, @NotNull String name, @NotNull String format, @Nullable int maxDurationSeconds, @Nullable int maxSilenceSeconds, @Nullable String ifExists, @Nullable boolean beep, @Nullable String terminateOn) {
reset();
url = "/channels/" + channelId + "/record";
method = "POST";
lParamQuery.add( HttpParam.build( "name", name) );
lParamQuery.add( HttpParam.build( "format", format) );
lParamQuery.add( HttpParam.build( "maxDurationSeconds", maxDurationSeconds) );
lParamQuery.add( HttpParam.build( "maxSilenceSeconds", maxSilenceSeconds) );
lParamQuery.add( HttpParam.build( "ifExists", ifExists) );
lParamQuery.add( HttpParam.build( "beep", beep) );
lParamQuery.add( HttpParam.build( "terminateOn", terminateOn) );
lE.add( HttpResponse.build( 400, "Invalid parameters") );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel is not in a Stasis application; the channel is currently bridged with other hcannels; A recording with the same name already exists on the system and can not be overwritten because it is in progress or ifExists=fail") );
lE.add( HttpResponse.build( 422, "The format specified is unknown on this system") );
}

@Override
public LiveRecording record(@NotNull String channelId, @NotNull String name, @NotNull String format, @Nullable int maxDurationSeconds, @Nullable int maxSilenceSeconds, @Nullable String ifExists, @Nullable boolean beep, @Nullable String terminateOn) throws RestException {
buildRecord(channelId, name, format, maxDurationSeconds, maxSilenceSeconds, ifExists, beep, terminateOn);
String json = httpActionSync();
return deserializeJson( json, LiveRecording_impl_ari_0_0_1.class ); 
}

@Override
public void record(@NotNull String channelId, @NotNull String name, @NotNull String format, @Nullable int maxDurationSeconds, @Nullable int maxSilenceSeconds, @Nullable String ifExists, @Nullable boolean beep, @Nullable String terminateOn, @NotNull AriCallback<LiveRecording> callback) {
buildRecord(channelId, name, format, maxDurationSeconds, maxSilenceSeconds, ifExists, beep, terminateOn);
httpActionAsync(callback, LiveRecording_impl_ari_0_0_1.class);
}

/**********************************************************
 * Send a ringing indication to a channel
 * 
 * Indicate ringing to a channel.
 *********************************************************/
private void buildRing(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "/ring";
method = "POST";
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void ring(@NotNull String channelId) throws RestException {
buildRing(channelId);
String json = httpActionSync();
}

@Override
public void ring(@NotNull String channelId, @NotNull AriCallback<Void> callback) {
buildRing(channelId);
httpActionAsync(callback);
}

/**********************************************************
 * Send a ringing indication to a channel
 * 
 * Stop ringing indication on a channel if locally generated.
 *********************************************************/
private void buildRingStop(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "/ring";
method = "DELETE";
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void ringStop(@NotNull String channelId) throws RestException {
buildRingStop(channelId);
String json = httpActionSync();
}

@Override
public void ringStop(@NotNull String channelId, @NotNull AriCallback<Void> callback) {
buildRingStop(channelId);
httpActionAsync(callback);
}

/**********************************************************
 * Play silence to a channel
 * 
 * Play silence to a channel.
 * Using media operations such as /play on a channel playing silence in this manner will suspend silence without resuming automatically.
 *********************************************************/
private void buildStartSilence(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "/silence";
method = "POST";
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void startSilence(@NotNull String channelId) throws RestException {
buildStartSilence(channelId);
String json = httpActionSync();
}

@Override
public void startSilence(@NotNull String channelId, @NotNull AriCallback<Void> callback) {
buildStartSilence(channelId);
httpActionAsync(callback);
}

/**********************************************************
 * Play silence to a channel
 * 
 * Stop playing silence to a channel.
 *********************************************************/
private void buildStopSilence(@NotNull String channelId) {
reset();
url = "/channels/" + channelId + "/silence";
method = "DELETE";
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void stopSilence(@NotNull String channelId) throws RestException {
buildStopSilence(channelId);
String json = httpActionSync();
}

@Override
public void stopSilence(@NotNull String channelId, @NotNull AriCallback<Void> callback) {
buildStopSilence(channelId);
httpActionAsync(callback);
}

/**********************************************************
 * Snoop (spy/whisper) on a channel
 * 
 * Start snooping.
 * Snoop (spy/whisper) on a specific channel.
 *********************************************************/
private void buildSnoopChannel(@NotNull String channelId, @Nullable String spy, @Nullable String whisper, @NotNull String app, @Nullable String appArgs) {
reset();
url = "/channels/" + channelId + "/snoop";
method = "POST";
lParamQuery.add( HttpParam.build( "spy", spy) );
lParamQuery.add( HttpParam.build( "whisper", whisper) );
lParamQuery.add( HttpParam.build( "app", app) );
lParamQuery.add( HttpParam.build( "appArgs", appArgs) );
lE.add( HttpResponse.build( 400, "Invalid parameters") );
lE.add( HttpResponse.build( 404, "Channel not found") );
}

@Override
public Channel snoopChannel(@NotNull String channelId, @Nullable String spy, @Nullable String whisper, @NotNull String app, @Nullable String appArgs) throws RestException {
buildSnoopChannel(channelId, spy, whisper, app, appArgs);
String json = httpActionSync();
return deserializeJson( json, Channel_impl_ari_0_0_1.class ); 
}

@Override
public void snoopChannel(@NotNull String channelId, @Nullable String spy, @Nullable String whisper, @NotNull String app, @Nullable String appArgs, @NotNull AriCallback<Channel> callback) {
buildSnoopChannel(channelId, spy, whisper, app, appArgs);
httpActionAsync(callback, Channel_impl_ari_0_0_1.class);
}

/**********************************************************
 * Variables on a channel
 * 
 * Get the value of a channel variable or function.
 *********************************************************/
private void buildGetChannelVar(@NotNull String channelId, @NotNull String variable) {
reset();
url = "/channels/" + channelId + "/variable";
method = "GET";
lParamQuery.add( HttpParam.build( "variable", variable) );
lE.add( HttpResponse.build( 400, "Missing variable parameter.") );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public Variable getChannelVar(@NotNull String channelId, @NotNull String variable) throws RestException {
buildGetChannelVar(channelId, variable);
String json = httpActionSync();
return deserializeJson( json, Variable_impl_ari_0_0_1.class ); 
}

@Override
public void getChannelVar(@NotNull String channelId, @NotNull String variable, @NotNull AriCallback<Variable> callback) {
buildGetChannelVar(channelId, variable);
httpActionAsync(callback, Variable_impl_ari_0_0_1.class);
}

/**********************************************************
 * Variables on a channel
 * 
 * Set the value of a channel variable or function.
 *********************************************************/
private void buildSetChannelVar(@NotNull String channelId, @NotNull String variable, @Nullable String value) {
reset();
url = "/channels/" + channelId + "/variable";
method = "POST";
lParamQuery.add( HttpParam.build( "variable", variable) );
lParamQuery.add( HttpParam.build( "value", value) );
lE.add( HttpResponse.build( 400, "Missing variable parameter.") );
lE.add( HttpResponse.build( 404, "Channel not found") );
lE.add( HttpResponse.build( 409, "Channel not in a Stasis application") );
}

@Override
public void setChannelVar(@NotNull String channelId, @NotNull String variable, @Nullable String value) throws RestException {
buildSetChannelVar(channelId, variable, value);
String json = httpActionSync();
}

@Override
public void setChannelVar(@NotNull String channelId, @NotNull String variable, @Nullable String value, @NotNull AriCallback<Void> callback) {
buildSetChannelVar(channelId, variable, value);
httpActionAsync(callback);
}

/**********************************************************
 * 
 * 
 * @since ari_1_7_0
 *********************************************************/
public void originateWithId(@NotNull String channelId, @NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String label, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String otherChannelId, @Nullable String originator, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public void create(@NotNull String endpoint, @NotNull String app, @Nullable String appArgs, @Nullable String channelId, @Nullable String otherChannelId, @Nullable String originator, @Nullable String formats, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_7_0
 *********************************************************/
public void continueInDialplan(@NotNull String channelId, @Nullable String context, @Nullable String extension, @Nullable int priority, @Nullable String label, @NotNull AriCallback<Void> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public void snoopChannel(@NotNull String channelId, @Nullable String spy, @Nullable String whisper, @NotNull String app, @Nullable String appArgs, @Nullable String snoopId, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Create a new channel (originate with id).
 * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
 * 
 * @since ari_1_10_0
 *********************************************************/
public Channel originateWithId(@NotNull String channelId, @NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String label, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String otherChannelId, @Nullable String originator, @Nullable String formats) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Create a new channel (originate).
 * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
 * 
 * @since ari_1_10_0
 *********************************************************/
public Channel originate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String label, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String channelId, @Nullable String otherChannelId, @Nullable String originator, @Nullable String formats) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public void originate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String channelId, @Nullable String otherChannelId, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Redirect the channel to a different location.
 * 
 * 
 * @since ari_1_8_0
 *********************************************************/
public void redirect(@NotNull String channelId, @NotNull String endpoint) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public void originateWithId(@NotNull String channelId, @NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String label, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String otherChannelId, @Nullable String originator, @Nullable String formats, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public void snoopChannelWithId(@NotNull String channelId, @NotNull String snoopId, @Nullable String spy, @Nullable String whisper, @NotNull String app, @Nullable String appArgs, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_7_0
 *********************************************************/
public void originate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String label, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String channelId, @Nullable String otherChannelId, @Nullable String originator, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Start playback of media and specify the playbackId.
 * The media URI may be any of a number of URI's. Currently sound: and recording: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
 * 
 * @since ari_1_5_0
 *********************************************************/
public Playback playWithId(@NotNull String channelId, @NotNull String playbackId, @NotNull String media, @Nullable String lang, @Nullable int offsetms, @Nullable int skipms) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public void play(@NotNull String channelId, @NotNull String media, @Nullable String lang, @Nullable int offsetms, @Nullable int skipms, @Nullable String playbackId, @NotNull AriCallback<Playback> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Start snooping.
 * Snoop (spy/whisper) on a specific channel.
 * 
 * @since ari_1_5_0
 *********************************************************/
public Channel snoopChannelWithId(@NotNull String channelId, @NotNull String snoopId, @Nullable String spy, @Nullable String whisper, @NotNull String app, @Nullable String appArgs) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public void dial(@NotNull String channelId, @Nullable String caller, @Nullable int timeout, @NotNull AriCallback<Void> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Create channel.
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public Channel create(@NotNull String endpoint, @NotNull String app, @Nullable String appArgs, @Nullable String channelId, @Nullable String otherChannelId, @Nullable String originator, @Nullable String formats) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public void originate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String label, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String channelId, @Nullable String otherChannelId, @Nullable String originator, @Nullable String formats, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_8_0
 *********************************************************/
public void redirect(@NotNull String channelId, @NotNull String endpoint, @NotNull AriCallback<Void> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Exit application{
  throw new UnsupportedOperationException("Method availble from ...");
}; continue execution in the dialplan.
 * 
 * 
 * @since ari_1_7_0
 *********************************************************/
public void continueInDialplan(@NotNull String channelId, @Nullable String context, @Nullable String extension, @Nullable int priority, @Nullable String label) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Create a new channel (originate with id).
 * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
 * 
 * @since ari_1_5_0
 *********************************************************/
public Channel originateWithId(@NotNull String channelId, @NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String otherChannelId) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Start snooping.
 * Snoop (spy/whisper) on a specific channel.
 * 
 * @since ari_1_5_0
 *********************************************************/
public Channel snoopChannel(@NotNull String channelId, @Nullable String spy, @Nullable String whisper, @NotNull String app, @Nullable String appArgs, @Nullable String snoopId) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Create a new channel (originate).
 * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
 * 
 * @since ari_1_7_0
 *********************************************************/
public Channel originate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String label, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String channelId, @Nullable String otherChannelId, @Nullable String originator) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Create a new channel (originate).
 * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
 * 
 * @since ari_1_5_0
 *********************************************************/
public Channel originate(@NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String channelId, @Nullable String otherChannelId) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Start playback of media.
 * The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
 * 
 * @since ari_1_5_0
 *********************************************************/
public Playback play(@NotNull String channelId, @NotNull String media, @Nullable String lang, @Nullable int offsetms, @Nullable int skipms, @Nullable String playbackId) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Create a new channel (originate with id).
 * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
 * 
 * @since ari_1_7_0
 *********************************************************/
public Channel originateWithId(@NotNull String channelId, @NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String label, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String otherChannelId, @Nullable String originator) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public void playWithId(@NotNull String channelId, @NotNull String playbackId, @NotNull String media, @Nullable String lang, @Nullable int offsetms, @Nullable int skipms, @NotNull AriCallback<Playback> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Dial a created channel.
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public void dial(@NotNull String channelId, @Nullable String caller, @Nullable int timeout) throws RestException{
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public void originateWithId(@NotNull String channelId, @NotNull String endpoint, @Nullable String extension, @Nullable String context, @Nullable long priority, @Nullable String app, @Nullable String appArgs, @Nullable String callerId, @Nullable int timeout, @Nullable Map<String,String> variables, @Nullable String otherChannelId, @NotNull AriCallback<Channel> callback){
  throw new UnsupportedOperationException("Method availble from ...");
};

};


package ch.loway.oss.ari4java.generated;

// ----------------------------------------------------
//      THIS CLASS WAS GENERATED AUTOMATICALLY         
//               PLEASE DO NOT EDIT                    
//    Generated on: Thu Aug 24 17:02:57 CEST 2017
// ----------------------------------------------------

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import ch.loway.oss.ari4java.tools.RestException;
import ch.loway.oss.ari4java.tools.AriCallback;
import ch.loway.oss.ari4java.tools.tags.*;

/**********************************************************
 * 
 * Generated by: JavaInterface
 *********************************************************/


public interface ActionRecordings {

// void copyStored @NotNull String @NotNull String @NotNull AriCallback<StoredRecording> callback
/**********************************************************
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public void copyStored(@NotNull String recordingName, @NotNull String destinationRecordingName, @NotNull AriCallback<StoredRecording> callback);



// void deleteStored @NotNull String @NotNull AriCallback<Void> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void deleteStored(@NotNull String recordingName, @NotNull AriCallback<Void> callback);



// void stop @NotNull String @NotNull AriCallback<Void> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void stop(@NotNull String recordingName, @NotNull AriCallback<Void> callback);



// byte[] getStoredFile @NotNull String
/**********************************************************
 * Get the file associated with the stored recording.
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public byte[] getStoredFile(@NotNull String recordingName) throws RestException;



// void pause @NotNull String @NotNull AriCallback<Void> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void pause(@NotNull String recordingName, @NotNull AriCallback<Void> callback);



// void getStoredFile @NotNull String @NotNull AriCallback<byte[]> callback
/**********************************************************
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public void getStoredFile(@NotNull String recordingName, @NotNull AriCallback<byte[]> callback);



// void getLive @NotNull String @NotNull AriCallback<LiveRecording> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void getLive(@NotNull String recordingName, @NotNull AriCallback<LiveRecording> callback);



// void mute @NotNull String @NotNull AriCallback<Void> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void mute(@NotNull String recordingName, @NotNull AriCallback<Void> callback);



// List<StoredRecording> listStored
/**********************************************************
 * List recordings that are complete.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public List<StoredRecording> listStored() throws RestException;



// void unpause @NotNull String @NotNull AriCallback<Void> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void unpause(@NotNull String recordingName, @NotNull AriCallback<Void> callback);



// void stop @NotNull String
/**********************************************************
 * Stop a live recording and store it.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void stop(@NotNull String recordingName) throws RestException;



// void deleteStored @NotNull String
/**********************************************************
 * Delete a stored recording.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void deleteStored(@NotNull String recordingName) throws RestException;



// void getStored @NotNull String @NotNull AriCallback<StoredRecording> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void getStored(@NotNull String recordingName, @NotNull AriCallback<StoredRecording> callback);



// void pause @NotNull String
/**********************************************************
 * Pause a live recording.
 * Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.
 * 
 * @since ari_0_0_1
 *********************************************************/
public void pause(@NotNull String recordingName) throws RestException;



// StoredRecording copyStored @NotNull String @NotNull String
/**********************************************************
 * Copy a stored recording.
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public StoredRecording copyStored(@NotNull String recordingName, @NotNull String destinationRecordingName) throws RestException;



// void unmute @NotNull String
/**********************************************************
 * Unmute a live recording.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void unmute(@NotNull String recordingName) throws RestException;



// LiveRecording getLive @NotNull String
/**********************************************************
 * List live recordings.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public LiveRecording getLive(@NotNull String recordingName) throws RestException;



// void unmute @NotNull String @NotNull AriCallback<Void> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void unmute(@NotNull String recordingName, @NotNull AriCallback<Void> callback);



// void cancel @NotNull String @NotNull AriCallback<Void> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void cancel(@NotNull String recordingName, @NotNull AriCallback<Void> callback);



// StoredRecording getStored @NotNull String
/**********************************************************
 * Get a stored recording's details.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public StoredRecording getStored(@NotNull String recordingName) throws RestException;



// void unpause @NotNull String
/**********************************************************
 * Unpause a live recording.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void unpause(@NotNull String recordingName) throws RestException;



// void mute @NotNull String
/**********************************************************
 * Mute a live recording.
 * Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.
 * 
 * @since ari_0_0_1
 *********************************************************/
public void mute(@NotNull String recordingName) throws RestException;



// void listStored @NotNull AriCallback<List<StoredRecording>> callback
/**********************************************************
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void listStored(@NotNull AriCallback<List<StoredRecording>> callback);



// void cancel @NotNull String
/**********************************************************
 * Stop a live recording and discard it.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public void cancel(@NotNull String recordingName) throws RestException;


}
;

package ch.loway.oss.ari4java.generated;

// ----------------------------------------------------
//      THIS CLASS WAS GENERATED AUTOMATICALLY         
//               PLEASE DO NOT EDIT                    
//    Generated on: Wed Aug 30 12:35:03 CEST 2017
// ----------------------------------------------------

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import ch.loway.oss.ari4java.tools.RestException;
import ch.loway.oss.ari4java.tools.AriCallback;
import ch.loway.oss.ari4java.tools.tags.*;

/**********************************************************
 * 
 * Generated by: JavaInterface
 *********************************************************/


public interface ActionRecordings {

// java.util.concurrent.CompletionStage<List<StoredRecording>> listStored
/**********************************************************
 * List recordings that are complete.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<List<StoredRecording>> listStored();



// java.util.concurrent.CompletionStage<StoredRecording> getStored @NotNull String
/**********************************************************
 * Get a stored recording's details.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<StoredRecording> getStored(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<Void> deleteStored @NotNull String
/**********************************************************
 * Delete a stored recording.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<Void> deleteStored(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<LiveRecording> getLive @NotNull String
/**********************************************************
 * List live recordings.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<LiveRecording> getLive(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<Void> cancel @NotNull String
/**********************************************************
 * Stop a live recording and discard it.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<Void> cancel(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<Void> stop @NotNull String
/**********************************************************
 * Stop a live recording and store it.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<Void> stop(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<Void> pause @NotNull String
/**********************************************************
 * Pause a live recording.
 * Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<Void> pause(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<Void> unpause @NotNull String
/**********************************************************
 * Unpause a live recording.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<Void> unpause(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<Void> mute @NotNull String
/**********************************************************
 * Mute a live recording.
 * Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<Void> mute(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<Void> unmute @NotNull String
/**********************************************************
 * Unmute a live recording.
 * 
 * 
 * @since ari_0_0_1
 *********************************************************/
public java.util.concurrent.CompletionStage<Void> unmute(@NotNull String recordingName);



// java.util.concurrent.CompletionStage<StoredRecording> copyStored @NotNull String @NotNull String
/**********************************************************
 * Copy a stored recording.
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public java.util.concurrent.CompletionStage<StoredRecording> copyStored(@NotNull String recordingName, @NotNull String destinationRecordingName);



// java.util.concurrent.CompletionStage<byte[]> getStoredFile @NotNull String
/**********************************************************
 * Get the file associated with the stored recording.
 * 
 * 
 * @since ari_1_10_0
 *********************************************************/
public java.util.concurrent.CompletionStage<byte[]> getStoredFile(@NotNull String recordingName);


}
;

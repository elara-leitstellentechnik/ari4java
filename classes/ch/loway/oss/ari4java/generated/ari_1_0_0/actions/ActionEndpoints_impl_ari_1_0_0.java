package ch.loway.oss.ari4java.generated.ari_1_0_0.actions;

// ----------------------------------------------------
//      THIS CLASS WAS GENERATED AUTOMATICALLY         
//               PLEASE DO NOT EDIT                    
//    Generated on: Wed Aug 30 12:39:18 CEST 2017
// ----------------------------------------------------

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import ch.loway.oss.ari4java.generated.*;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import ch.loway.oss.ari4java.tools.BaseAriAction;
import ch.loway.oss.ari4java.tools.RestException;
import ch.loway.oss.ari4java.tools.AriCallback;
import ch.loway.oss.ari4java.tools.HttpParam;
import ch.loway.oss.ari4java.tools.HttpResponse;
import com.fasterxml.jackson.core.type.TypeReference;
import ch.loway.oss.ari4java.generated.ari_1_0_0.models.*;

/**********************************************************
 * 
 * Generated by: Apis
 *********************************************************/


public class ActionEndpoints_impl_ari_1_0_0 extends BaseAriAction  implements ActionEndpoints {
/**********************************************************
 * Asterisk endpoints
 * 
 * List all endpoints.
 *********************************************************/
private void buildList() {
reset();
url = "/endpoints";
method = "GET";
}

@Override
public de.elara.common.utils.concurrent.SafeCompletionStage<List<Endpoint>> list() {
buildList();
de.elara.common.utils.concurrent.SafeCompletableFuture<List<Endpoint>> future = new de.elara.common.utils.concurrent.SafeCompletableFuture<>();
httpActionAsync(callbackOnceFuture(future), new TypeReference<List<Endpoint_impl_ari_1_0_0>>() {});
return future;
}

/**********************************************************
 * Asterisk endpoints
 * 
 * List available endoints for a given endpoint technology.
 *********************************************************/
private void buildListByTech(@NotNull String tech) {
reset();
url = "/endpoints/" + tech + "";
method = "GET";
lE.add( HttpResponse.build( 404, "Endpoints not found") );
}

@Override
public de.elara.common.utils.concurrent.SafeCompletionStage<List<Endpoint>> listByTech(@NotNull String tech) {
buildListByTech(tech);
de.elara.common.utils.concurrent.SafeCompletableFuture<List<Endpoint>> future = new de.elara.common.utils.concurrent.SafeCompletableFuture<>();
httpActionAsync(callbackOnceFuture(future), new TypeReference<List<Endpoint_impl_ari_1_0_0>>() {});
return future;
}

/**********************************************************
 * Single endpoint
 * 
 * Details for an endpoint.
 *********************************************************/
private void buildGet(@NotNull String tech, @NotNull String resource) {
reset();
url = "/endpoints/" + tech + "/" + resource + "";
method = "GET";
lE.add( HttpResponse.build( 404, "Endpoints not found") );
}

@Override
public de.elara.common.utils.concurrent.SafeCompletionStage<Endpoint> get(@NotNull String tech, @NotNull String resource) {
buildGet(tech, resource);
de.elara.common.utils.concurrent.SafeCompletableFuture<Endpoint> future = new de.elara.common.utils.concurrent.SafeCompletableFuture<>();
httpActionAsync(callbackOnceFuture(future), Endpoint_impl_ari_1_0_0.class);
return future;
}

/**********************************************************
 * Send a message to some technology URI or endpoint.
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public de.elara.common.utils.concurrent.SafeCompletionStage<Void> sendMessage(@NotNull String to, @NotNull String from, @Nullable String body, @Nullable Map<String,String> variables){
  throw new UnsupportedOperationException("Method availble from ...");
};

/**********************************************************
 * Send a message to some endpoint in a technology.
 * 
 * 
 * @since ari_1_5_0
 *********************************************************/
public de.elara.common.utils.concurrent.SafeCompletionStage<Void> sendMessageToEndpoint(@NotNull String tech, @NotNull String resource, @NotNull String from, @Nullable String body, @Nullable Map<String,String> variables){
  throw new UnsupportedOperationException("Method availble from ...");
};

};

